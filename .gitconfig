[http]
  postBuffer = 2M
[color]
  ui = true
  diff = auto
  status = auto
  branch = auto
[core]
  excludesfile = ~/.gitignore
  quotepath = false
[include]
  path = ~/.gitconfig.local
[alias]
  sn = "!f() { \
    if [ $# -ne 1 ];\
    then \
      echo 'required comment message by first args';\
    else \
      git add -A; \
      git commit -m \"$1\"; \
    fi; \
  }; f"
  snp = "!f() { \
    if [ $# -ne 1 ];\
    then \
      echo 'required comment message by first args';\
    else \
      git add -A; \
      git commit -m \"$1\"; \
      git pob; \
    fi; \
  }; f"
  h = help
  st = status -sb
  stc = !git status -sb| grep -v "^[DAM]\\ " | grep --color "^[A-Z]*\\ "
  cm = commit -m
  cmp = "!f() { \
    if [ $# -ne 1 ];\
    then \
      echo 'required comment message by first args';\
    else \
      git commit -m \"$1\"; \
      git pob; \
    fi; \
  }; f"
  amm = commit --amend -m
  amc = commit --amend --no-edit
  co = checkout
  aa = add -A
  b = branch -vv
  ba = branch -a -vv
  bm = branch -m
  bd = !git branch --merged | grep -v \\* | xargs -I % git branch -d %
  fe = fetch -p
  mf = merge FETCH_HEAD
  mod = merge origin/develop -m "behind解消"
  mom = merge origin/master -m "behind解消"
  moc = "!f() { \
    git branch --no-color 2> /dev/null | \
    sed -e '/^[^*]/d' | \
    sed -e 's/* // ' | \
    xargs -I@ git merge origin/@; \
  }; f"
  mos = merge origin/swagger-crossx_api -m "behind解消"
  d = diff
  ds = diff --name-status
  di = diff --cached
  l = log --oneline --no-merges -n 18
  la = log --oneline -n 18
  ls = log --oneline --no-merges -n 18 --name-status
  lsa = log --oneline -n 18 --name-status
  lsr = log --oneline --no-merges -n 18 --name-status --author='r_tsukamoto' origin/develop..HEAD
  lsra = log --oneline -n 18 --name-status --author='r_tsukamoto' origin/develop..HEAD
  ll = log --graph --date=format:'%y/%m/%d %H:%M:%S' --pretty=format:'\t\b\b\b%C(yellow)%h%Creset %C(cyan)%ad%Creset %C(green)%an%Creset%C(auto)%d%Creset%n\t%C(white bold)%w(80)%s%n%Creset%w(80,2,2)%b'
  lls = log --graph --date=format:'%y/%m/%d %H:%M:%S' --pretty=format:'\t\b\b\b%C(yellow)%h%Creset %C(cyan)%ad%Creset %C(green)%an%Creset%C(auto)%d%Creset%n\t%C(white bold)%w(80)%s%n%Creset%w(80,2,2)%b' --name-status
  lll = log
  lf = log -p
  ss = stash push -u
  sss = stash show
  ssss = stash show -p
  ssl = stash list --pretty='%C(yellow)%gd%Creset %gs'
  ssa = stash apply --index
  ssd = stash drop
  ssp = stash pop --index
  ssb = stash branch
  ig = rm --cached
  uncm = reset --soft
  unst = reset --mixed
  unch = reset --hard
  po = push origin
  pob = "!f() { \
    git branch --no-color 2> /dev/null | \
    sed -e '/^[^*]/d' | \
    sed -e 's/* // ' | \
    xargs -I@ git push origin @; \
  }; f"
  als = !"git config --list | grep ^alias\\. | sort | sed s/^alias\\.// | sed -e 's/=/ /' | awk '{printf \"%-10s %s\",$1,c=\"\";for(i=2;i<=NF;i++) c=c $i\" \"; print c}'"
  gs = "!f() { \
    if [ $# -ne 2 ];\
    then \
      echo 'two arguments are required. the string before replacement and the string after replacement';\
    else \
      git ls-files -z | xargs -0 sed -i -e \"s/$1/$2/g\";\
    fi; \
  }; f"
  fd = "!f() { \
    if [ $# -ne 1 ];\
    then \
      echo 'required find string by first args';\
    else \
      git ls-files | grep --color \"$1\";\
    fi; \
  }; f"
  g = "!f() { \
    if [ $# -eq 0 ]; then \
      echo 'arguments are required.'; \
    else \
      str='git grep -n \"'$1'\"'; \
      is_v='';\
      if [ $# -gt 1 ]; then \
        for x in ${@:2:$#-1}; do \
          if [ $x = '-v' ]; then \
            is_v='-v ';\
          else \
            str=$str' | grep '$is_v' \"'$x'\"'; \
            is_v='';\
          fi; \
        done; \
        str=$str' | grep --color \"'$1'\"'; \
      fi; \
      eval "$str"; \
    fi; \
  }; f"
